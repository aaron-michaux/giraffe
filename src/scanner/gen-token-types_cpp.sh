#!/bin/bash

set -e

cd "$(dirname "$0")"

TOKEN_TYPES_H=token-types.h

# --------------------------------------------------------- Create TOKEN_TYPES_C
cat <<EOF

// AUTOGENERATED by $(basename "$0")

#include <string_view>
#include <vector>

#include "scanner/token-types.h"

extern "C" {
const char * token_id_to_cstr(uint8_t token_id)
{
   switch(token_id) {
EOF

cat "$TOKEN_TYPES_H" | grep -E "^#define [A-Z_0-9]+ +[0-9]+ *$" | sed 's/^#define \([A-Z_0-9]*\) *\([0-9]*\).*$/   case \2: return "\1";/' | sort -k2 -n 

cat <<EOF
   }
   return "?";
}
}

namespace giraffe {
std::string_view token_id_to_str(uint8_t token_id) noexcept
{
   return token_id_to_cstr(token_id);
}

const std::vector<uint8_t>& all_token_ids() noexcept
{
   auto make_ids = [] () -> std::vector<uint8_t> {
      std::vector<uint8_t> o;
      o.reserve(255);
EOF

cat "$TOKEN_TYPES_H" | grep -E "^#define [A-Z_0-9]+ +[0-9]+ *$" | sed 's/^#define \([A-Z_0-9]*\) *\([0-9]*\).*$/      o.push_back(\2);/' 

cat <<EOF
      o.shrink_to_fit();
      return o;
   };

   static std::vector<uint8_t> ids_ = make_ids();
   return ids_;
}

}

EOF



